= Introduction =

Brief overview of JSF Flex Framework Components


= Details =

==Overview==
There are two projects for components within JSF Flex component, namely component14 and component15, mainly to provide capability for JRE < 1.5 and JRE >= 1.5 {will let reader figure out which one is what =)}. The choice of which component one will choose will depend on the arguments provided when building the artifacts through maven {default will be component14}. Other decisions and choices of implementation will be decided when building the artifacts through maven, but more on that later.

==UIComponent field inspection==

===component14===
For component14, during the build time javaDocs will be inspected by the JSF Flex Plug-in to generate replaceMapping XML files that will be parsed during runtime to check which fields to inspect and how to fetch these fields from the sub-classes of UIComponent {by attribute map or by method invocation}.

===component15===
Since these components are suppose to be used for JRE >= 1.5, the attributes will be fetched during runtime through annotation and will not require JSF Flex Plug-in during build time.

===Etcetera===
In order to have single point of entry for retrieving these info for jsf-flex-framework-core project, each will implement {{{_AnnotationDocletParser}}} interface provided from the jsf-flex-framework-core project {i.e. component14 will be 
{{{AnnotationDocletParser14Impl}}} and component15 will be {{{AnnotationDocletParser15Impl}}} }. Then during build time, the correct parameters will be set for the jsf-flex-framework-core's factory and will instantiate the correct implementation during runtime.


==Main points for JSF Flex Framework Components==
Main thing to note in terms of design for the component are the following :
 * Classes which are not concrete, meaning MXML.+Template will mainly have a method called mapFields which is simply to inspect either the replaceMapping XML or annotation {depending on the JRE version} to retrieve the values from the sub-class of UIComponent during the JSF Flex Framework's buildComponentBegin lifecycle.
 * Concrete classes have a method addCreatePreMxmlTask which is to create the preMxml file with the responsibility of creating these files lie with implementations of {{{_FileManipulatorTaskRunner}}} interface {default being  {{{VelocityFileManipulatorTaskRunnerImpl}}} }. The implementation choice for this interface and two other interfaces {{{_CommonTaskRunner}}} and {{{_FlexTaskRunner}}} are determined during the maven build process.
 * {{{MXMLComponentBaseActions}}} class within jsf-flex-framework-core project during the buildComponentEnd will write the body content of the component {i.e. MXMLScript} as long as the correct content is pushed to the attribute map. For an example, view the {{{MXMLUIScriptTag}}} within the jsf-flex project where the body content is pushed to the component's attribute map as MXMLConstants.TAG_BODY_CONTENT_ATTR.
 * MXMLApplication is a special class that has an added responsibility during its buildComponentEnd to 
   * merge the preMxml files into a MXML file
   * create SWC file for the system's library
   * extract the SWF file from SWC for the shared resource of all application SWF files
   * flush necessary resources {i.e. componentValueMapper.xml} for the system's library to the correct directory
   * extract the flexSDK to the correct directory
   * create the application's SWF file.